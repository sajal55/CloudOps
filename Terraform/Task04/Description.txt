we need to write a terraform Script in which we need to deploy an ec2 instance and we need to attach Application load Balancer and we need monitor it’s health status:

attaching code: 

provider "aws" {
  region = "us-east-1" 
  access_key = "AAKiA3JGKSSMtryhbhBHSNH"
  secret_key ="LUjjK24vABnotvalidEDNJDJNDjk76bfjnjdPHy0XjdhnrnB6P" 
}
resource "aws_instance" "web" {
  ami           = "ami-0f34c5ae932e6f0e4"  
  instance_type = "t2.micro"
  key_name = "mykey"
  security_groups = [aws_security_group.alb_sg.name]
}
resource "aws_security_group" "alb_sg" {
  name        = "security group using Terraform"
  description = "security group using Terraform"
  

  ingress {
    description      = "HTTPS"
    from_port        = 443
    to_port          = 443
    protocol         = "tcp"
    #Classless Inter-Domain Routing represents an IP address range. 
    #It consists of an IP address and a prefix length, separated by a forward slash ("/"). 
    #The prefix length indicates the number of leading bits in the subnet mask.
    cidr_blocks      = ["0.0.0.0/0"] #["0.0.0.0/0"] means that all IP addresses (anywhere in the world) are allowed to access the resource.
  
  }

  ingress {
    description      = "HTTP"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    
  }

  ingress {
    description      = "SSH"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    
  }
}


resource "aws_lb" "my_albb" {
  name               = "my-albb"
  internal           = false #whether the ALB should be internal or externally accessible
  load_balancer_type = "application"
  security_groups   = [aws_security_group.alb_sg.id]
  subnets            = var.subnets
  enable_deletion_protection = false 
  #Deletion protection prevents accidental deletion of the resource,
   #but it can be disabled when you need to destroy the resource.
  
  enable_http2 = true #HTTP/2 is a newer version of the HTTP protocol to inc performance improvements,
  #HTTP/2 is the second version of the HTTP protocol aiming to make applications faster, 
}


resource "aws_lb_target_group" "my_target_group" {
  name     = "my-target-group"
  
  port     = 80
  protocol = "HTTP"
  vpc_id   = "vpc-0a86b3f9384fa9c26"  

  health_check {
    #The path on the target that the load balancer uses to perform the health check.
    #In this case, #it's set to "/" to check the root path of the targets.
    path        = "/"
    protocol    = "HTTP"
    port        = "traffic-port"
    # "traffic-port" is a placeholder that instructs AWS to use the same port as the target group's port
    interval    = 30
    timeout     = 10
    unhealthy_threshold = 2
    healthy_threshold   = 3
  }
}

resource "aws_lb_listener" "my_listener" {
  load_balancer_arn = aws_lb.my_albb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    target_group_arn = aws_lb_target_group.my_target_group.arn
    type             = "forward"
  }
}

resource "aws_lb_target_group_attachment" "my_target_group_attachment" {
  count           = 1 # how many instances you want to attach to the target group. 
  target_group_arn = aws_lb_target_group.my_target_group.arn
  target_id       = aws_instance.web.id
  port            = 80
}
#HTTPCode_ELB_5XX_Count
#Sum


resource "aws_cloudwatch_metric_alarm" "alb_health_alarm" {
  alarm_name          = "ALBHealthAlarm"
  comparison_operator = "GreaterThanOrEqualToThreshold"
  evaluation_periods = 1
  metric_name        = "HealthyStateDNS"
  #"HealthyThresholdCount"
  namespace          = "AWS/ApplicationELB"
  period             = 60
 
  statistic          = "Sum"
  threshold          = 0
  alarm_description = "Alarm when ALB health check fails"
  alarm_actions = [aws_sns_topic.examplee.arn]
  dimensions = {
    LoadBalancer = aws_lb.my_albb.name
    TargetGroup  = aws_lb_target_group.my_target_group.name
  }
}

/*
resource "aws_cloudwatch_metric_alarm" "alb_health_alarm" {
  alarm_name          = "ALBHealthAlarm"
  comparison_operator = "GreaterThanOrEqualToThreshold"
  evaluation_periods = "2"  # Number of consecutive periods the condition must be true to trigger the alarm
  metric_name         = "HealthyStateDNS"
  namespace           = "AWS/ApplicationELB"
  period              = "60"  # The period, in seconds, over which the specified statistic is applied
  statistic           = "SampleCount"
  threshold           = "1"   # The threshold to trigger the alarm
  alarm_description  = "ALB health check alarm"
  alarm_actions      = [aws_sns_topic.examplee.arn]  # Replace with your SNS topic ARN
  dimensions = {
    LoadBalancer = aws_lb.my_alb.id
    TargetGroup  = aws_lb_target_group.my_target_group.name
  }
}
*/
resource "aws_sns_topic" "examplee" {
  name = "test_beta"
}
resource "aws_sns_topic_subscription" "example" {
  topic_arn = aws_sns_topic.examplee.arn
  protocol  = "email"
  endpoint  = "sajal.sharma@geminisolutions.com"
}

Variables.tf file: 

variable "subnets" {
    type = list
    default = ["subnet-07e1da280287d2f65","subnet-082e8ab384534dc92"]
}